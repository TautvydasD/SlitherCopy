@page "/snake"
@using System.Drawing;
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions.Canvas.WebGL; 

<h3>Snake</h3>

@*<input @onkeydown="@OnKeyDown" />*@
<div @onload="@OnKeyDown">

</div>
<BECanvas Width="300" Height="400" @ref="_canvasReference"></BECanvas>

@code {

    //private Canvas2DContext _context;

    //protected BECanvasComponent _canvasReference;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    this._context = await this._canvasReference.CreateCanvas2DAsync();
    //    await this._context.SetFillStyleAsync("green");

    //    await this._context.FillRectAsync(10, 100, 100, 100);

    //    await this._context.SetFontAsync("48px serif");
    //    await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 100);
    //}
    private WebGLContext _context;

    protected BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateWebGLAsync();

        await this._context.ClearColorAsync(0, 0, 0, 1); // this call does not draw anything, so it does not need to be included in the explicit batch

        await this._context.BeginBatchAsync(); // begin the explicit batch

        await this._context.ClearAsync(BufferBits.COLOR_BUFFER_BIT);
        await this._context.DrawArraysAsync(Primitive.TRIANGLES, 0, 3);

        await this._context.EndBatchAsync(); // execute all currently batched calls
    }
    public void OnKeyDown()
    {
        //var pos1 = new Point(20, 20);
        //var pos = new Rectangle(10,10,20,20);
        //var color = new Color();
        //color.
        Graphics GR;
        Bitmap BM;
        Rectangle myrect = new Rectangle(10, 10, 10, 10);
        Pen penTest = new System.Drawing.Pen(Brushes.Red);

        //using (GR = Graphics.FromImage((Image)BM))
        //{
        //    GR.DrawRectangle(penTest, myrect);
        //}

        //picturebox1.Image = BM;

    }
}
