@page "/snake"
@using System.Drawing;
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions.Canvas.WebGL;
@using Snek.Shared.Board;
@inject NavigationManager NavigationManager;
@inject HttpClient Http
@inject IJSRuntime JSRuntime;

<h3>Snake</h3>

<div>
    Pressed key: @presskey

</div>

<div @onkeypress="pressed">
</div>

<button class="btn btn-primary" @onclick="GoLeft">Left</button>

<button class="btn btn-primary" @onclick="GoRight">Right</button>

<button class="btn btn-primary" @onclick="GoUp">Up</button>

<button class="btn btn-primary" @onclick="GoDown">Down</button>

<div class="row">
    <div class="col-sm text-center" @onkeyup="@Start">
        <h4>Our Snake ☭</h4>
        @*<table class="snake-map">
                @for (int i = 0; i < 10; i++)
                {
                    <tr>
                        @for (int j = 0; j < 10; j++)
                        {
                            <td class="snake-tile">
                                <div style="width:35px;height:35px;">

                                </div>
                            </td>
                        }
                    </tr>
                }
            </table>*@

        <table class="snake-map">
            @for (int i = 0; i < Map.GetLength(0); i++)
            {
                <tr>
                    @for (int j = 0; j < Map.GetLength(1); j++)
                    {
                        <td class="snake-tile">
                            <div style="width:35px;height:35px;" class="@((food.Column == j && food.Row == i)? "red" : "")  @((pos.Column == j && pos.Row == i) ? "green": "")">
                            </div>
                        </td>
                    }
                </tr>
            }
        </table>
    </div>


</div>
<h2>@message</h2>

@for (var i = 1; i < 4; i++)
{
    var buttonNumber = i;

    <button class="btn btn-primary"
            @onclick="@(e => UpdateHeading(e, buttonNumber))">
        Button #@i
    </button>
}


@code {
    public string presskey { get; set; } = "Key pressed";
    public int[,] Map = new int[10, 10];
    public Coordinates food { get; set; } = new Coordinates(5, 5);

    public Coordinates pos { get; set; } = new Coordinates(1, 1);

    public int MoveTilesRight { get; set; } = 1;
    public int MoveTilesUp { get; set; } = 1;

    public event EventHandler SnakeMovement;

    public int Score { get; set; } = 0;

    protected ElementReference myDiv;  // set by the @ref attribute

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);
        }
    }

    private void GoRight()
    {
        if (pos.Column == 9)
            pos.Column = 0;
        else
            pos.Column++;
    }
    private void GoLeft()
    {
        if (pos.Column == 0)
            pos.Column = 9;
        else
            pos.Column--;
    }
    private void GoDown()
    {
        if (pos.Row == 9)
            pos.Row = 0;
        else
            pos.Row++;
    }
    private void GoUp()
    {
        if (pos.Row == 0)
            pos.Row = 9;
        else
            pos.Row--;
    }

    private void GenerateFood()
    {
        Random rnd = new Random();
        food.Row = rnd.Next(1, 9);
        food.Column = rnd.Next(1, 9);

    }
    //protected override void OnInitialized()
    //{
    //    pos = new Coordinates(5,5);
    //    SnakeMovement += (o, e) => StateHasChanged();

    //}

    private async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {

    }
    public async void Going()
    {
        while (true)
        {
            if (pos.Column < 10)
                pos.Column = 0;
            else
                pos.Column++;
            SnakeMovement?.Invoke(this, EventArgs.Empty);
            await Task.Delay(20);
            await InvokeAsync(StateHasChanged);
        }
    }


    public void Start(KeyboardEventArgs e)
    {
        pos.Column++;
        this.StateHasChanged();
    }

    void Go(KeyboardEventArgs e)
    {
        if (e.Key == " ")
        {
            pos.Column++;
        }
    }

    public void pressed(KeyboardEventArgs e)
    {
        presskey = e.Key;
        this.StateHasChanged();
    }

    private string message = "Select a button to learn its position.";

    private void UpdateHeading(MouseEventArgs e, int buttonNumber)
    {
        message = $"You selected Button #{buttonNumber} at " +
            $"mouse position: {e.ClientX} X {e.ClientY}.";
    }
    //private Canvas2DContext _context;

    //protected BECanvasComponent _canvasReference;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    this._context = await this._canvasReference.CreateCanvas2DAsync();
    //    await this._context.SetFillStyleAsync("white");
    //    await this._context.SetLineWidthAsync(10);
    //    await this._context.SetFillStyleAsync("green");
    //    for (int i = 0; i < 10; i++)
    //    {
    //        await this._context.FillRectAsync(10, 100, 100, 100);
    //        //for (int j = 0; j < length; j++)
    //        //{

    //        //}
    //    }

    //    //await this._context.SetFontAsync("48px serif");
    //    //await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 100);
    //}
    ////private WebGLContext _context;

    ////protected BECanvasComponent _canvasReference;

    ////protected override async Task OnAfterRenderAsync(bool firstRender)
    ////{
    ////    this._context = await this._canvasReference.CreateWebGLAsync();

    ////    await this._context.ClearColorAsync(0, 0, 0, 1); // this call does not draw anything, so it does not need to be included in the explicit batch

    ////    await this._context.BeginBatchAsync(); // begin the explicit batch

    ////    await this._context.ClearAsync(BufferBits.COLOR_BUFFER_BIT);
    ////    await this._context.DrawArraysAsync(Primitive.TRIANGLES, 0, 3);

    ////    await this._context.EndBatchAsync(); // execute all currently batched calls
    ////}
    //public void OnKeyDown()
    //{
    //    //var pos1 = new Point(20, 20);
    //    //var pos = new Rectangle(10,10,20,20);
    //    //var color = new Color();
    //    //color.
    //    Graphics GR;
    //    Bitmap BM;
    //    Rectangle myrect = new Rectangle(10, 10, 10, 10);
    //    Pen penTest = new System.Drawing.Pen(Brushes.Red);

    //    //using (GR = Graphics.FromImage((Image)BM))
    //    //{
    //    //    GR.DrawRectangle(penTest, myrect);
    //    //}

    //    //picturebox1.Image = BM;

    //}
}
