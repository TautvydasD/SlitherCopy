@using Snek.Shared.Board;
@using Snek.Shared;
@using Snek.Shared.Entities;
@using Snek.Shared.Entities.Consumables;
@using System.Linq;

@inject IJSRuntime JSRuntime;

<div class="game">
    <div class="highscore-table">
        <div>
            <h4>Highscore</h4>
        </div>
        <div>
            Player 1: @(!(counter is null) ? counter.GetSum() : 0)
        </div>
        <div>
            <h4>Quests</h4>
        </div>
        @if (counter is not null)
        {
            @foreach (Quest quest in mainQuest)
            {
                <div>
                    @if (quest.isCompleted(greenAppleCount, counter.GetSum(), _gameManager.snake.Body.posArr.Length + 1))
                    {
                        <span style="color: #ff0000">@quest.Display()</span>
                    }
                    else
                    {
                        <span style="color: #000000">@quest.Display()</span>
                    }

                </div>
            }


        }


    </div>

    <div class="row margin-style" @onclick="_gameManager.StartGame" @onkeydown="@HandleKeyUp" tabindex="0" @ref="myDiv">
        <div class="col-sm text-center">
            @*<h4>Our Snake â˜­</h4>*@
            <table class="snake-map">
                @for (int i = 0; i < MapMatrix.GetLength(0); i++)
                {
                    <tr>
                        @for (int j = 0; j < MapMatrix.GetLength(1); j++)
                        {
                        <td class="snake-tile">
                            @if (_gameManager.snake.Head.pos.Column == j && _gameManager.snake.Head.pos.Row == i)
                            {
                                <div class="cell-size green"></div>
                            }
                            else if (_gameManager.snake.Body.posArr.Any(pos => pos.Row == i && pos.Column == j))
                            {
                                <div class="cell-size red"></div>
                            }
                            @* else if (food.Column == j && food.Row == i)
                            {
                                <div class="cell-size">
                                    <img class="cell-size" src="@fruits[fruitIndex]" />
                                </div>
                            } *@
                            else if (mapFruit.Position.Row == i && mapFruit.Position.Column == j)
                            {
                                <div class="cell-size">
                                    <img class="cell-size" src="@mapFruit.Image" />
                                </div>
                            }
                            else if (mapPowerUp.Position.Row == i && mapPowerUp.Position.Column == j )
                            {
                                <div class="cell-size">
                                    <img class="cell-size" src="@mapPowerUp.Color" />
                                </div>
                            }
                            else if (GlobalPower.Position.Column == j && GlobalPower.Position.Row == i)
                            {
                                <div class="cell-size">
                                    <img class="cell-size" src="@GlobalPower.Color" />
                                </div>
                            }
                            else if (bomb.Position.Column == j && bomb.Position.Row == i)
                            {
                                <div class="cell-size">
                                    <img class="cell-size" src="@bomb.Image" />
                                </div>
                            }
                            else if (appleDecorator.Position.Column == j && appleDecorator.Position.Row == i)
                            {
                                <div class="cell-size">
                                    <img class="cell-size" src="@appleDecorator.Image" />
                                </div>
                            }
                            else
                            {
                                <div class="cell-size"></div>
                            }
                        </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </div>

</div>

<div class="joy-stick-area">
    <div class="game-button button-up">
        <button class="btn btn-primary game-button" @onclick="_gameManager.snake.MoveUp">Up</button>
    </div>
    <div class="game-button button-down">
        <button class="btn btn-primary game-button" @onclick="_gameManager.snake.MoveDown">Down</button>
    </div>
    <div class="game-button button-left">
        <button class="btn btn-primary game-button" @onclick="_gameManager.snake.MoveLeft">Left</button>
    </div>
    <div class="game-button button-right">
        <button class="btn btn-primary game-button" @onclick="_gameManager.snake.MoveRight">Right</button>
    </div>
</div>

@code {
    public string[] fruits { get; set; } = { "apple.png", "cherry2.png", "pineapple.png",
                                             "rainbowApple.png", "spoiledApple2.png",
                                             "shrink.png", "cash.png"};
    public int greenAppleCount { get; set; } = 0;
    public Factory factory = null;
    public PowerUp GlobalPower { get; set; } = null;
    public int fruitIndex { get; set; }
    public int Score { get; set; } = 0;
    public string letter { get; set; } = "";
    public int[,] MapMatrix = new int[10, 10];
    public Coordinates food { get; set; }
    public Coordinates powerUp { get; set; }
    GameManager _gameManager { get; set; }
    public Food bomb = null;
    public PointCounter counter = null;

    public CompositeQuest mainQuest = null;
    public FoodQuest foodQuest = null;
    public PointsQuest pointQuest = null;
    public CompositeQuest sideQuest = null;
    public LengthQuest lengthQuest = null;

    public string season = "winter";
    public IMap seasonMap = null;
    //public IMap summer = new SummerMapFactory();
    //public IMap autumn = new AutumnMapFactory();
    //public IMap winter = new WinterMapFactory();

    public Food mapFruit = null;
    public PowerUp mapPowerUp = null;

    public Food apple = null;
    public AppleDecorator appleDecorator = null;





    protected ElementReference myDiv;  // set by the @ref attribute

    protected override void OnInitialized()
    {
        _gameManager = new GameManager();
        _gameManager.snake.MoveRight();
        Console.WriteLine("Awww, here we go again!");
        InitialiseMap();
        GenerateBomb();
        GenerateFood();
        GenerateGlobalPowerUp();
        GenerateMapPowerUp();
        GenerateApple();
        HandeQuests();
        _gameManager.MainLoopCompleted += (o, e) => StateHasChanged();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        //Console.WriteLine($"Y:{food.Row}; X:{food.Column}");
        //DecreaseScore(_gameManager.snake.Head.pos, bomb);
        CountScore(_gameManager.snake.Head.pos);
        InvokePowerUp(_gameManager.snake.Head.pos);
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);
    }

    protected void HandleKeyUp(KeyboardEventArgs e)
    {
        letter = $"Pressed: [{e.Key}]";
        if (e.Key == "ArrowUp")
            _gameManager.snake.MoveUp();
        else if (e.Key == "ArrowDown")
            _gameManager.snake.MoveDown();
        else if (e.Key == "ArrowLeft")
            _gameManager.snake.MoveLeft();
        else if (e.Key == "ArrowRight")
            _gameManager.snake.MoveRight();
        else if (e.Key == "e")
        {
            //Snek.Shared.Entities.PowerUp powerUp = new Snek.Shared.Entities.PowerUp("SpeedBoost");
            //powerUp.Name = "SpeedBoost";
            factory = new SpeedFactory();
            //GlobalPower = factory.CreatePowerUp();
            _gameManager.powerUpControl.UsePowerUp(_gameManager.snake, GlobalPower);
            //Console.WriteLine("Speed" + _gameManager.snake.SpeedBoost);
        }
        else if (e.Key == "r")
        {
            _gameManager.powerUpControl.Discard(0);
            //Console.WriteLine("Speed" + _gameManager.snake.SpeedBoost);
        }
    }
    public void InitialiseMap()
    {
        switch(season)
        {
            case "summer":
                seasonMap = new SummerMapFactory();
                break;
            case "autumn":
                seasonMap = new AutumnMapFactory();
                break;
            case "winter":
                seasonMap = new WinterMapFactory();
                break;
        }
    }
    public void GenerateBomb()
    {
        bomb = new BombAdapter();
    }
    public void GenerateFood()
    {
        mapFruit = seasonMap.CreateFood();
        //Random rnd = new Random();
        //fruitIndex = rnd.Next(0, 7);
        //int row = rnd.Next(0, 9);
        //int column = rnd.Next(0, 9);
        //food = new Coordinates(row, column);
        //food = powerUp.Column == column && powerUp.Row == row ? new Coordinates(rnd.Next(0, 9), rnd.Next(0, 9)) : new Coordinates(row, column);
    }

    public void GenerateApple()
    {
        var rnd = new Random();
        apple = new Apple();
        var appleIndex = rnd.Next(0,3);
        switch(appleIndex)
        {
            case 0:
                GreenApple green = new GreenApple(apple);
                PoisonApple poisoned = new PoisonApple(green);
                poisoned.ToConsole();
                appleDecorator = poisoned;
                break;
            case 1:
                RainbowApple rainbow = new RainbowApple(apple);
                GreenApple greener = new GreenApple(rainbow);
                greener.ToConsole();
                appleDecorator = greener;
                break;
            case 2:
                appleDecorator = new PoisonApple(appleDecorator);
                break;
            default:
                appleDecorator = new GreenApple(appleDecorator);
                break;
        }

    }
    public void GenerateGlobalPowerUp()
    {
        Random rnd = new Random();
        var factoryIndex =  rnd.Next(0, 2);
        switch (factoryIndex)
        {
            case 0:
                factory = new DoublePointsFactory();
                Console.WriteLine("This is double points");
                break;
            case 1:
                factory = new SpeedFactory();
                Console.WriteLine("This is speed boost");
                break;
            default:
                Console.WriteLine("Unknown value");
                break;
        }
        GlobalPower = factory.CreatePowerUp();
    }
    public void GenerateMapPowerUp()
    {
        mapPowerUp = seasonMap.CreatePowerUp();
    }
    public void DecreaseScore(Coordinates player, Food bomb)
    {
        if (player.Column == bomb.Position.Column && player.Row == bomb.Position.Row)
        {
            Score+=bomb.LifeCount;
            GenerateBomb();
        }
    }
    public void CountScore(Coordinates player)
    {
        // Point Counter
        PointCounter normalFood = new FoodPointCounter("food");
        PointCounter poisonedFood = new PoisonFoodPointCounter("poison");
        PointCounter specialFood = new SpecialFoodPointCounter("special");
        PointCounter bombFood = new BombPointCounter("bomb");
        PointCounter noFood = new NoFoodCounter("noPoints");


        normalFood.SetNextChain(poisonedFood);
        poisonedFood.SetNextChain(specialFood);
        specialFood.SetNextChain(bombFood);
        bombFood.SetNextChain(noFood);
        noFood.SetNextChain(null);

        counter = normalFood;

        if (player.Column == mapFruit.Position.Column && player.Row == mapFruit.Position.Row)
        {
            counter.Calculate(mapFruit.Image);
            _gameManager.snake.Grow();
            //Score++;
            Score = counter.GetSum();
            GenerateFood();
        }
        else if (player.Column == appleDecorator.Position.Column && player.Row == appleDecorator.Position.Row)
        {
            if(appleDecorator.Image == "greenApple.png")
            {
                greenAppleCount++;
            }
            counter.Calculate(appleDecorator.Image);
            _gameManager.snake.Grow();
            //Score++;
            Score = counter.GetSum();
            GenerateApple();
        }
        else if (player.Column == bomb.Position.Column && player.Row == bomb.Position.Row)
        {
            //Score += bomb.LifeCount;
            counter.Calculate(bomb.Image);
            Score = counter.GetSum();
            GenerateBomb();
        }
    }

    public void HandeQuests()
    {
        mainQuest = new CompositeQuest("mainQuest");
        //mainQuest.Add(new PointsQuest("pointsQuest"));

        sideQuest = new CompositeQuest("sideQuest");
        sideQuest.Add(lengthQuest = new LengthQuest("Length Quest"));
        sideQuest.Add(foodQuest = new FoodQuest("Food Quest"));

        //sideQuest.Add(new FoodQuest("foodQuest"));
        //sideQuest.Add(new LengthQuest("lengthQuest"));
        mainQuest.Add(sideQuest);
        mainQuest.Add(pointQuest = new PointsQuest("Point Quest"));
        foreach (Quest quest in mainQuest)
        {
            Console.WriteLine(quest.Display());
        }
        //Console.WriteLine("Diffrent print ");
        //var enumerator = mainQuest.GetEnumerator();
        //while (enumerator.MoveNext())
        //{
        //    Console.WriteLine(enumerator.Current.Display());
        //}
    }

    public void InvokePowerUp(Coordinates player)
    {
        if (player.Column == GlobalPower.Position.Column && player.Row == GlobalPower.Position.Row)
        {
            GlobalPower.InvokeEffect(_gameManager.snake);
            GenerateGlobalPowerUp();
        }
        else if (player.Column == mapPowerUp.Position.Column && player.Row == mapPowerUp.Position.Row)
        {
            GenerateMapPowerUp();
        }
    }
}
