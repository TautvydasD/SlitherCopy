@using Snek.Shared.Board;
@using Snek.Shared;
@using Snek.Shared.Entities;
@using System.Linq;

@inject IJSRuntime JSRuntime;

<div class="game">
    <div class="highscore-table">
        <div>
            <h4>Highscore</h4>
        </div>
        <div>
            Player 1: @Score
        </div>
    </div>

    <div class="row margin-style" @onclick="_gameManager.StartGame" @onkeydown="@HandleKeyUp" tabindex="0" @ref="myDiv">
        <div class="col-sm text-center">
            @*<h4>Our Snake â˜­</h4>*@
            <table class="snake-map">
                @for (int i = 0; i < MapMatrix.GetLength(0); i++)
                {
                    <tr>
                        @for (int j = 0; j < MapMatrix.GetLength(1); j++)
                        {
                            <td class="snake-tile">
                                @if (_gameManager.snake.Head.pos.Column == j && _gameManager.snake.Head.pos.Row == i)
                                {
                                    <div class="cell-size green"></div>
                                }
                                else if (_gameManager.snake.Body.posArr.Any(pos => pos.Row == i && pos.Column == j))
                                {
                                    <div class="cell-size red"></div>
                                }
                                else if (food.Column == j && food.Row == i)
                                {
                                    <div class="cell-size">
                                        <img class="cell-size" src="@fruits[fruitIndex]" />
                                    </div>
                                }
                                else if (GlobalPower.Position.Column == j && GlobalPower.Position.Row == i)
                                {
                                    <div class="cell-size">
                                        <img class="cell-size" src="@GlobalPower.Color" />
                                    </div>
                                }
                                else
                                {
                                    <div class="cell-size"></div>
                                }
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </div>

</div>

<div class="joy-stick-area">
    <div class="game-button button-up">
        <button class="btn btn-primary game-button" @onclick="_gameManager.snake.MoveUp">Up</button>
    </div>
    <div class="game-button button-down">
        <button class="btn btn-primary game-button" @onclick="_gameManager.snake.MoveDown">Down</button>
    </div>
    <div class="game-button button-left">
        <button class="btn btn-primary game-button" @onclick="_gameManager.snake.MoveLeft">Left</button>
    </div>
    <div class="game-button button-right">
        <button class="btn btn-primary game-button" @onclick="_gameManager.snake.MoveRight">Right</button>
    </div>
</div>

@code {
    public string[] fruits { get; set; } = { "apple.png", "cherry2.png", "pineapple.png",
                                             "rainbowApple.png", "spoiledApple2.png",
                                             "shrink.png", "cash.png"};

    public Factory factory = null;
    public PowerUp GlobalPower { get; set; } = null;
    public int fruitIndex { get; set; }
    public int Score { get; set; } = 0;
    public string letter { get; set; } = "";
    public int[,] MapMatrix = new int[10, 10];
    public Coordinates food { get; set; }
    public Coordinates powerUp { get; set; }
    GameManager _gameManager { get; set; }


    protected ElementReference myDiv;  // set by the @ref attribute

    protected override void OnInitialized()
    {
        _gameManager = new GameManager();
        _gameManager.snake.MoveRight();
        Console.WriteLine("Im being generated again");
        GenerateFood();
        GeneratePowerUp();
        _gameManager.MainLoopCompleted += (o, e) => StateHasChanged();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        //Console.WriteLine($"Y:{food.Row}; X:{food.Column}");
        AddScore(_gameManager.snake.Head.pos, food);
        InvokePowerUp(_gameManager.snake.Head.pos, powerUp);
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);
    }

    protected void HandleKeyUp(KeyboardEventArgs e)
    {
        letter = $"Pressed: [{e.Key}]";
        if (e.Key == "ArrowUp")
            _gameManager.snake.MoveUp();
        else if (e.Key == "ArrowDown")
            _gameManager.snake.MoveDown();
        else if (e.Key == "ArrowLeft")
            _gameManager.snake.MoveLeft();
        else if (e.Key == "ArrowRight")
            _gameManager.snake.MoveRight();
        else if (e.Key == "e")
        {
            //Snek.Shared.Entities.PowerUp powerUp = new Snek.Shared.Entities.PowerUp("SpeedBoost");
            //powerUp.Name = "SpeedBoost";
            factory = new SpeedFactory();
            GlobalPower = factory.CreatePowerUp();
            _gameManager.powerUpControl.UsePowerUp(_gameManager.snake, GlobalPower);
            //Console.WriteLine("Speed" + _gameManager.snake.SpeedBoost);
        }
        else if (e.Key == "r")
        {
            _gameManager.powerUpControl.Discard(0);
            //Console.WriteLine("Speed" + _gameManager.snake.SpeedBoost);
        }
    }

    public void GenerateFood()
    {
        Random rnd = new Random();
        fruitIndex = rnd.Next(0, 7);
        int row = rnd.Next(0, 9);
        int column = rnd.Next(0, 9);
        food = new Coordinates(row, column);
        //food = powerUp.Column == column && powerUp.Row == row ? new Coordinates(rnd.Next(0, 9), rnd.Next(0, 9)) : new Coordinates(row, column);
    }
    public void GeneratePowerUp()
    {
        Random rnd = new Random();
        var factoryIndex =  rnd.Next(0, 2);
        switch (factoryIndex)
        {
            case 0:
                factory = new DoublePointsFactory();
                Console.WriteLine("This is double points");
                break;
            case 1:
                factory = new SpeedFactory();
                Console.WriteLine("This is speed boost");
                break;
            default:
                Console.WriteLine("Unknown value");
                break;
        }
        GlobalPower = factory.CreatePowerUp();
    }
    public void AddScore(Coordinates player, Coordinates food)
    {
        if (player.Column == food.Column && player.Row == food.Row)
        {
            _gameManager.snake.Grow();
            Score++;
            GenerateFood();
        }
    }
    public void InvokePowerUp(Coordinates player, Coordinates powerUp)
    {
        if (player.Column == GlobalPower.Position.Column && player.Row == GlobalPower.Position.Row)
        {
            GlobalPower.InvokeEffect(() =>_gameManager._speed, x => _gameManager._speed = x);
            GeneratePowerUp();
        }
    }
}
