@using Snek.Shared.Board;
@using Snek.Shared;
@inject IJSRuntime JSRuntime;

<button class="btn btn-primary" @onclick="_gameManager.MoveLeft">Left</button>
<button class="btn btn-primary" @onclick="_gameManager.MoveRight">Right</button>
<button class="btn btn-primary" @onclick="_gameManager.MoveUp">Up</button>
<button class="btn btn-primary" @onclick="_gameManager.MoveDown">Down</button>

<div class="row" @onclick="_gameManager.StartGame" @onkeydown="@HandleKeyUp" tabindex="0" @ref="myDiv">
    <div class="col-sm text-center">
        <h4>Our Snake ☭</h4>
        <table class="snake-map">
            @for (int i = 0; i < MapMatrix.GetLength(0); i++)
            {
                <tr>
                    @for (int j = 0; j < MapMatrix.GetLength(1); j++)
                    {
                        <td class="snake-tile">
                            <div style="width:35px;height:35px;" class="@((food.Column == j && food.Row == i)? "red" : "")  @((_gameManager.pos.Column == j && _gameManager.pos.Row == i) ? "green": "")">
                            </div>
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</div>

<h4>Highscore: @Score</h4>

@*<div class="jumbotron"
         @onkeydown="@KeyDown"
         tabindex="0"
         @ref="myDiv">
        <h1 class="display-4">
            @letter
        </h1>
    </div>*@


@code {

    public int Score { get; set; } = 0;
    public string letter { get; set; } = "";
    public int[,] MapMatrix = new int[10, 10];
    public Coordinates food { get; set; }

    GameManager _gameManager { get; set; }

    protected ElementReference myDiv;  // set by the @ref attribute

    protected override void OnInitialized()
    {
        _gameManager = new GameManager();
        _gameManager.MoveRight();
        GenerateFood();
        _gameManager.MainLoopCompleted += (o, e) => StateHasChanged();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        AddScore(_gameManager.pos, food);
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);
    }

    protected void KeyDown(KeyboardEventArgs e)
    {
        letter = $"Pressed: [{e.Key}]";
    }

    protected void HandleKeyUp(KeyboardEventArgs e)
    {
        letter = $"Pressed: [{e.Key}]";
        if (e.Key == "ArrowUp")
            _gameManager.MoveUp();
        else if (e.Key == "ArrowDown")
            _gameManager.MoveDown();
        else if (e.Key == "ArrowLeft")
            _gameManager.MoveLeft();
        else if (e.Key == "ArrowRight")
            _gameManager.MoveRight();
    }

    public void GenerateFood()
    {
        Random rnd = new Random();
        int row = rnd.Next(0, 9);
        int column = rnd.Next(0, 9);
        food = new Coordinates(row, column);
    }
    public void AddScore(Coordinates player, Coordinates food)
    {
        if (player.Column == food.Column && player.Row == food.Row)
        {
            Score++;
            GenerateFood();
        }
    }
}
